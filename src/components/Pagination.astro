---
const { pageProps } = Astro.props
const { page, pageType = null, pageSlug = null } = pageProps

const pageUrl = pageType ? `/${pageType}/${pageSlug}/` : '/'

const totalPageNumber = Math.ceil(page.total / page.size)

let currentPageNumber
currentPageNumber = page.currentPage

const paginationGenerator = (
  currentPageNumber: number,
  totalPageNumber: number,
  width: number = 1
) => {
  const prev = currentPageNumber - width
  const next = currentPageNumber + width + 1
  const ranges = []
  const rangeWidthDots: [string?, ...number[]] = []
  let length: number
  for (let i = 1; i <= totalPageNumber; i += 1) {
    if (i === 1 || i === totalPageNumber || (i >= prev && i <= next)) {
      ranges.push(i)
    } else if (i < prev) {
      i = prev - 1
    } else if (i > next) {
      ranges.push(totalPageNumber)
      break
    }
  }
  ranges.forEach((range) => {
    if (length) {
      if (range - length === 2) {
        rangeWidthDots.push(length + 1)
      } else if (range - length !== 1) {
        rangeWidthDots.push('...')
      }
    }
    rangeWidthDots.push(range)
    length = range
  })
  return rangeWidthDots
}
---

{
  totalPageNumber > 1 && (
    <div class="container">
      <ul class="list">
        {paginationGenerator(currentPageNumber, totalPageNumber).map((page) => {
          if (page === 1) {
            return (
              <li class="item">
                <a href={pageUrl} class="itemLink">
                  {page}
                </a>
              </li>
            )
          } else if (page === '...') {
            return (
              <li class="item">
                <span class="itemLink">{page}</span>
              </li>
            )
          }
          return (
            <li class="item">
              <a href={`${pageUrl}${page}/`} class="itemLink">
                {page}
              </a>
            </li>
          )
        })}
      </ul>
    </div>
  )
}

<style lang="scss">
  @use '../styles/variable' as var;

  .container {
    margin-top: 5rem;
  }
  .list {
    display: flex;
    flex-direction: row;
    justify-content: center;
    gap: 1.5rem;
  }
  .itemLink {
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    width: 4rem;
    height: 4rem;
    font-size: 1.4rem;
    font-family: 'Urbanist', sans-serif;
    border: 1px solid var(--color-text-black);
    border-radius: 50%;
  }

  @media screen and (max-width: var.$break-point-sp) {
    .container {
      margin-top: 3.5rem;
    }
    .list {
      gap: 1rem;
    }
    .itemLink {
      width: 3.5rem;
      height: 3.5rem;
      font-size: 1.2rem;
    }
  }
</style>
